// utils/authHelper.js

/**
 * V√©rifie si un token d'authentification valide existe
 * @returns {boolean} true si un token existe, false sinon
 */
export function hasValidToken() {
  const token = localStorage.getItem('daara_token');
  return !!token;
}

/**
 * R√©cup√®re le token d'authentification stock√©
 * @returns {string|null} Le token JWT ou null s'il n'existe pas
 */
export function getAuthToken() {
  return localStorage.getItem('daara_token');
}

/**
 * Nettoie un token pour √©viter les probl√®mes de format
 * @param {string} token - Le token √† nettoyer
 * @returns {string} Le token nettoy√©
 */
export function cleanToken(token) {
  if (!token) return '';
  return token.trim();
}

/**
 * Ajoute le token d'authentification aux en-t√™tes de la requ√™te
 * @param {Object} headers - Les en-t√™tes existants
 * @returns {Object} Les en-t√™tes avec l'authentification ajout√©e
 */
export function addAuthHeader(headers = {}) {
  const token = getAuthToken();
  if (token) {
    // Nettoyer le token avant de l'utiliser
    const cleanedToken = cleanToken(token);
    return {
      ...headers,
      'Authorization': `Bearer ${cleanedToken}`
    };
  }
  return headers;
}

/**
 * Effectue une requ√™te authentifi√©e vers l'API avec plusieurs tentatives en cas d'√©chec
 * Cette fonction est con√ßue pour √™tre robuste et g√©rer tous les cas d'erreur courants
 * 
 * @param {string} url - L'URL de l'API
 * @param {Object} options - Les options de fetch (m√©thode, corps, etc.)
 * @returns {Promise} La promesse de la requ√™te fetch
 */
export async function authenticatedFetch(url, options = {}) {
  console.log(`üîÑ Requ√™te authentifi√©e vers: ${url}`);
  
  // R√©cup√©ration du token
  let token = getAuthToken();
  
  // Si pas de token, essayer de continuer quand m√™me pour les APIs qui permettent l'acc√®s anonyme
  if (!token) {
    console.warn("‚ö†Ô∏è Attention: Tentative de requ√™te authentifi√©e sans token disponible");
    console.log("üí° Tentative de requ√™te non authentifi√©e...");
    
    try {
      const response = await fetch(url, {
        ...options,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          ...options.headers
        }
      });
      
      console.log(`üìä R√©ponse API (sans auth): ${response.status} ${response.statusText}`);
      return response;
    } catch (noAuthError) {
      console.error('‚ùå Erreur lors de la requ√™te non authentifi√©e:', noAuthError.message);
      throw new Error(`√âchec de la requ√™te sans authentification: ${noAuthError.message}`);
    }
  }
  
  // Nettoyer le token
  token = cleanToken(token);
  console.log(`üîë Token utilis√© (d√©but): ${token.substring(0, 10)}...`);
  
  // STRAT√âGIE 1: Essai avec "Bearer {token}"
  try {
    console.log("üîÑ Tentative #1: Avec pr√©fixe 'Bearer'");
    const authHeader = `Bearer ${token}`;
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': authHeader,
        ...options.headers
      }
    });
    
    console.log(`üìä R√©ponse API (Bearer): ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      return response; // Succ√®s avec Bearer
    }
    
    // Si 401, essayer les autres strat√©gies
    if (response.status === 401) {
      console.warn('‚ö†Ô∏è √âchec avec Bearer (401) - Tentative suivante...');
    } else {
      // Pour les autres codes d'erreur, retourner directement la r√©ponse
      return response;
    }
  } catch (bearerError) {
    console.error('‚ùå Erreur lors de la requ√™te avec Bearer:', bearerError.message);
    // Continuer avec la strat√©gie suivante
  }
  
  // STRAT√âGIE 2: Essai avec le token seul (sans "Bearer")
  try {
    console.log("üîÑ Tentative #2: Sans pr√©fixe 'Bearer'");
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': token, // Token seul sans "Bearer"
        ...options.headers
      }
    });
    
    console.log(`üìä R√©ponse API (Token seul): ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      return response; // Succ√®s avec token seul
    }
    
    // Si toujours pas ok, essayer la derni√®re strat√©gie
    if (response.status === 401) {
      console.warn('‚ö†Ô∏è √âchec sans Bearer (401) - Tentative suivante...');
    } else {
      return response; // Pour les autres codes d'erreur
    }
  } catch (tokenOnlyError) {
    console.error('‚ùå Erreur lors de la requ√™te avec token seul:', tokenOnlyError.message);
    // Continuer avec la derni√®re strat√©gie
  }
  
  // STRAT√âGIE 3: Param√®tre de requ√™te (dernier recours)
  try {
    console.log("üîÑ Tentative #3: Token dans l'URL");
    
    // Ajouter le token comme param√®tre de requ√™te
    const separator = url.includes('?') ? '&' : '?';
    const urlWithToken = `${url}${separator}token=${encodeURIComponent(token)}`;
    
    const response = await fetch(urlWithToken, {
      ...options,
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        ...options.headers
      }
    });
    
    console.log(`üìä R√©ponse API (URL token): ${response.status} ${response.statusText}`);
    
    // Si 401 apr√®s 3 tentatives, le token est probablement invalide ou expir√©
    if (response.status === 401) {
      console.error('‚ùå Toutes les tentatives d\'authentification ont √©chou√© (401)');
      console.warn('‚ö†Ô∏è Token probablement invalide ou expir√©, effacement des donn√©es d\'authentification...');
      
      // Effacer les donn√©es d'authentification
      localStorage.removeItem('daara_token');
      localStorage.removeItem('daara_user');
      
      // Rediriger vers la page de connexion dans 3 secondes
      console.log('üîÑ Redirection vers la page de connexion dans 3 secondes...');
      setTimeout(() => {
        window.location.href = '/';
      }, 3000);
    }
    
    return response;
  } catch (urlTokenError) {
    console.error('‚ùå Erreur lors de la requ√™te avec token dans l\'URL:', urlTokenError.message);
    throw new Error(`√âchec de toutes les tentatives d'authentification: ${urlTokenError.message}`);
  }
}
