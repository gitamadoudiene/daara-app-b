const mongoose = require('mongoose');
const School = require('./models/School');
const User = require('./models/User');

require('dotenv').config();

async function fixSchoolsData() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/daara');
    console.log('‚úÖ Connexion √† MongoDB r√©ussie');

    // 1. Cr√©er quelques √©coles de test
    console.log('\nüè´ Cr√©ation d\'√©coles de test...');
    
    const schoolsToCreate = [
      {
        name: '√âcole Primaire Daara',
        address: 'Dakar, S√©n√©gal',
        phone: '+221 77 123 45 67',
        email: 'contact@daara-primaire.sn',
        director: 'Amadou Diallo',
        createdYear: '2020',
        type: 'Public',
        status: 'Actif'
      },
      {
        name: 'Lyc√©e Technique Daara',
        address: 'Thi√®s, S√©n√©gal',
        phone: '+221 77 234 56 78',
        email: 'info@lycee-daara.sn',
        director: 'Fatou Sow',
        createdYear: '2018',
        type: 'Priv√©',
        status: 'Actif'
      },
      {
        name: 'Universit√© Daara',
        address: 'Saint-Louis, S√©n√©gal',
        phone: '+221 77 345 67 89',
        email: 'admin@universite-daara.sn',
        director: 'Cheikh Ndiaye',
        createdYear: '2015',
        type: 'Semi-public',
        status: 'Actif'
      }
    ];

    const createdSchools = [];
    for (const schoolData of schoolsToCreate) {
      // V√©rifier si l'√©cole existe d√©j√†
      const existingSchool = await School.findOne({ name: schoolData.name });
      if (!existingSchool) {
        const school = new School(schoolData);
        const savedSchool = await school.save();
        createdSchools.push(savedSchool);
        console.log(`‚úÖ √âcole cr√©√©e: ${savedSchool.name} (ID: ${savedSchool._id})`);
      } else {
        console.log(`‚ö†Ô∏è  √âcole existe d√©j√†: ${existingSchool.name}`);
        createdSchools.push(existingSchool);
      }
    }

    // 2. Nettoyer les utilisateurs avec des schoolId vides ou invalides
    console.log('\nüßπ Nettoyage des donn√©es utilisateur...');
    
    // D'abord, mettre √† jour tous les schoolId vides √† null
    const emptySchoolIdUpdate = await User.updateMany(
      { schoolId: "" },
      { $unset: { schoolId: 1 } }
    );
    console.log(`üîß ${emptySchoolIdUpdate.modifiedCount} utilisateur(s) avec schoolId vide nettoy√©s`);
    
    // Ensuite, trouver tous les utilisateurs sans schoolId
    const usersToFix = await User.find({
      $or: [
        { schoolId: null },
        { schoolId: { $exists: false } }
      ]
    });

    console.log(`üìã ${usersToFix.length} utilisateur(s) √† assigner √† une √©cole`);

    // Assigner al√©atoirement une √©cole aux utilisateurs sans √©cole
    if (createdSchools.length > 0 && usersToFix.length > 0) {
      for (const user of usersToFix) {
        const randomSchool = createdSchools[Math.floor(Math.random() * createdSchools.length)];
        user.schoolId = randomSchool._id;
        await user.save();
        console.log(`‚úÖ Utilisateur ${user.name} assign√© √† l'√©cole ${randomSchool.name}`);
      }
    }

    // 3. V√©rifier le r√©sultat final
    console.log('\nüìä R√©sultat final:');
    const totalSchools = await School.countDocuments();
    const totalUsers = await User.countDocuments();
    const usersWithSchool = await User.countDocuments({ 
      schoolId: { $exists: true, $ne: null, $ne: "" } 
    });

    console.log(`üè´ Nombre d'√©coles: ${totalSchools}`);
    console.log(`üë• Nombre total d'utilisateurs: ${totalUsers}`);
    console.log(`‚úÖ Utilisateurs avec √©cole assign√©e: ${usersWithSchool}`);
    console.log(`‚ùå Utilisateurs sans √©cole: ${totalUsers - usersWithSchool}`);

    // 4. Test de l'API populate
    console.log('\nüîç Test du populate...');
    const usersWithPopulatedSchool = await User.find({ 
      schoolId: { $exists: true, $ne: null, $ne: "" } 
    })
    .populate('schoolId', 'name')
    .limit(3);

    console.log('√âchantillon d\'utilisateurs avec √©coles popul√©es:');
    usersWithPopulatedSchool.forEach((user, index) => {
      console.log(`${index + 1}. ${user.name} - √âcole: ${user.schoolId?.name} (ID: ${user.schoolId?._id})`);
    });

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüëã D√©connexion de MongoDB');
    process.exit(0);
  }
}

fixSchoolsData();