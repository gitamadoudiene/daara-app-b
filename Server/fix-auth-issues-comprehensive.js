// fix-auth-issues-comprehensive.js
require('dotenv').config();
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const User = require('./models/User');
const School = require('./models/School');
const Class = require('./models/Class');

// Cette fonction va tester tous les aspects de l'authentification et de l'acc√®s aux ressources
async function diagnoseAndFixAuthIssues() {
  try {
    console.log('=== DIAGNOSTIC COMPLET DU SYST√àME D\'AUTHENTIFICATION ===');

    // 1. Connexion √† la base de donn√©es
    console.log('\nüîÑ Connexion √† MongoDB...');
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ Connect√© √† MongoDB');

    // 2. V√©rification de la configuration JWT
    console.log('\nüîÑ V√©rification de la configuration JWT...');
    if (!process.env.JWT_SECRET) {
      console.error('‚ùå ERREUR CRITIQUE: JWT_SECRET non d√©fini dans les variables d\'environnement!');
      process.exit(1);
    } else {
      console.log(`‚úÖ JWT_SECRET correctement configur√© (${process.env.JWT_SECRET.substring(0, 3)}...)`);
    }

    // 3. R√©cup√©ration d'un utilisateur SuperUser pour les tests
    console.log('\nüîÑ Recherche d\'un utilisateur SuperUser...');
    const superUser = await User.findOne({ role: 'superuser' });
    
    if (!superUser) {
      console.error('‚ùå Aucun utilisateur SuperUser trouv√© dans la base de donn√©es!');
      console.log('‚ö†Ô∏è Cr√©ation d\'un utilisateur SuperUser pour les tests...');
      
      // Cr√©er un superuser de test si n√©cessaire
      const newSuperUser = new User({
        firstName: 'Super',
        lastName: 'Admin',
        email: 'superadmin@daaraapp.com',
        password: await bcrypt.hash('SuperAdmin123!', 10),
        role: 'superuser'
      });
      
      await newSuperUser.save();
      console.log('‚úÖ SuperUser de test cr√©√© avec succ√®s');
      superUser = newSuperUser;
    } else {
      console.log(`‚úÖ Utilisateur SuperUser trouv√©: ${superUser.firstName} ${superUser.lastName} (${superUser.email})`);
    }

    // 4. G√©n√©ration d'un token JWT pour cet utilisateur
    console.log('\nüîÑ G√©n√©ration d\'un token JWT pour le SuperUser...');
    const payload = {
      userId: superUser._id,
      role: superUser.role
    };
    
    const token = jwt.sign(
      payload,
      process.env.JWT_SECRET,
      { expiresIn: '1d' }
    );
    
    console.log(`‚úÖ Token JWT g√©n√©r√©: ${token.substring(0, 20)}...`);
    
    // 5. V√©rification du token g√©n√©r√©
    console.log('\nüîÑ V√©rification du token g√©n√©r√©...');
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log('‚úÖ Token v√©rifi√© avec succ√®s');
      console.log(`üìä Informations du token: ID utilisateur=${decoded.userId}, r√¥le=${decoded.role}`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification du token: ${error.message}`);
      process.exit(1);
    }
    
    // 6. Recherche d'une √©cole pour les tests
    console.log('\nüîÑ Recherche d\'une √©cole pour les tests...');
    let school = await School.findOne();
    
    if (!school) {
      console.log('‚ö†Ô∏è Aucune √©cole trouv√©e dans la base de donn√©es');
      console.log('‚ö†Ô∏è Cr√©ation d\'une √©cole de test...');
      
      const newSchool = new School({
        name: "√âcole de Test",
        address: "123 Rue Test",
        phone: "+221 77 000 0000",
        email: "test@ecole.com",
        director: "Directeur Test",
        createdYear: "2025",
        type: "Public",
        status: "Actif"
      });
      
      school = await newSchool.save();
      console.log(`‚úÖ √âcole de test cr√©√©e avec ID: ${school._id}`);
    } else {
      console.log(`‚úÖ √âcole trouv√©e: ${school.name} (ID: ${school._id})`);
    }
    
    // 7. Recherche des classes pour cette √©cole
    console.log('\nüîÑ Recherche des classes pour cette √©cole...');
    
    const classes = await Class.find({ schoolId: school._id });
    
    if (classes.length === 0) {
      console.log('‚ö†Ô∏è Aucune classe trouv√©e pour cette √©cole');
      console.log('‚ö†Ô∏è Cr√©ation d\'une classe de test...');
      
      const newClass = new Class({
        name: "Classe de Test",
        level: "CM2",
        section: "A",
        schoolId: school._id,
        academicYear: "2025-2026"
      });
      
      await newClass.save();
      console.log('‚úÖ Classe de test cr√©√©e avec succ√®s');
    } else {
      console.log(`‚úÖ ${classes.length} classes trouv√©es pour cette √©cole`);
      classes.slice(0, 3).forEach(c => {
        console.log(`   - ${c.name} (ID: ${c._id})`);
      });
    }
    
    // 8. Test manuel de l'endpoint avec le token g√©n√©r√©
    console.log('\nüìã INSTRUCTIONS POUR TESTER L\'API MANUELLEMENT:');
    console.log('1. Utilisez le token suivant dans vos requ√™tes API:');
    console.log(`\n${token}\n`);
    console.log('2. Exemple de commande curl:');
    console.log(`curl -H "Authorization: Bearer ${token}" http://localhost:5000/api/classes/school/${school._id}`);
    console.log('\n3. Pour utiliser ce token dans le frontend:');
    console.log('   a. Ouvrez la console du navigateur');
    console.log('   b. Ex√©cutez la commande:');
    console.log(`      localStorage.setItem('daara_token', '${token}')`);
    console.log('   c. Actualisez la page et testez √† nouveau');
    
    // 9. Instructions pour v√©rifier le code d'auth
    console.log('\nüîç SUGGESTIONS DE CORRECTION:');
    console.log('1. Assurez-vous que le middleware auth.js fonctionne correctement:');
    console.log('   - Il doit accepter les tokens avec et sans pr√©fixe "Bearer"');
    console.log('   - Il doit tracer les erreurs de mani√®re d√©taill√©e');
    
    console.log('\n2. V√©rifiez les routes dans le fichier routes/class.js:');
    console.log('   - Assurez-vous que la route GET /api/classes/school/:schoolId est prot√©g√©e par le middleware auth mais pas par des restrictions de r√¥le');
    
    console.log('\n3. V√©rifiez le controller classController.js:');
    console.log('   - La fonction getClassesBySchool doit fonctionner pour tous les r√¥les');
    console.log('   - Elle ne doit pas contenir de v√©rification de r√¥le restrictive');
    
    console.log('\n4. Dans le frontend:');
    console.log('   - Assurez-vous que le token est bien r√©cup√©r√© de localStorage');
    console.log('   - Assurez-vous que l\'en-t√™te Authorization est correctement form√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ D√©connexion de MongoDB');
    console.log('=== FIN DU DIAGNOSTIC ===');
  }
}

diagnoseAndFixAuthIssues();
